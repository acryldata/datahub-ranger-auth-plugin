import org.apache.tools.zip.Zip64Mode


apply plugin: 'java'
apply plugin: 'com.github.johnrengelman.shadow'


compileJava {
    options.debug = true
}

shadowJar {
    zip64 true
    classifier = null
    determineAndSetVersion()
    archiveFileName = "$project.name-${version}.jar"
    exclude "META-INF/*.RSA", "META-INF/*.SF","META-INF/*.DSA"
}

dependencies {
    implementation(externalDependency.rangerCommons) {
        exclude group: "org.apache.htrace", module: "htrace-core4"
    }
    implementation externalDependency.hadoopCommon3
  
    constraints {
        implementation(externalDependency.woodstoxCore) {
            because("previous versions are vulnerable to CVE-2022-40151 CVE-2022-40152")
        }
        implementation(externalDependency.jettyClient) {
            because("previous versions are vulnerable to CVE-2021-28165")
        }
    }

    def auth_api = 'io.acryl:datahub-auth-api:0.9.3-3rc3'

    compileOnly "${auth_api}"

    compileOnly externalDependency.lombok

    testImplementation externalDependency.mockito
    testImplementation "${auth_api}"
    
    annotationProcessor externalDependency.lombok
}

def determineAndSetVersion() {
    def detailedVersionString = "0.0.0-unknown-SNAPSHOT"
    def snapshotVersion = false
    if (project.hasProperty("releaseVersion")) {
        version = releaseVersion
        detailedVersionString = releaseVersion
    } else {
        try {
            // apply this plugin in a try-catch block so that we can handle cases without .git directory
            apply plugin: "com.palantir.git-version"
            def details = versionDetails()
            detailedVersionString = gitVersion()
            version = details.lastTag
            version = version.startsWith("v")? version.substring(1): version
            def suffix = details.isCleanTag? "": "-SNAPSHOT"
            snapshotVersion = ! details.isCleanTag
        }
        catch (Exception e) {
            e.printStackTrace()
            // last fall back
            version = detailedVersionString
        }
    }
// trim version if it is of size 4 to size 3
    def versionParts = version.tokenize(".")
    if (versionParts.size() > 3) {
        // at-least 4 part version
        // we check if the 4th part is a .0 in which case we want to create a release
        if (versionParts[3] != '0') {
            snapshotVersion = true
        }
        versionParts = versionParts[0..2]
        version = versionParts[0..2].join('.')
    }

    if (snapshotVersion) {
        if (versionParts[versionParts.size()-1].isInteger()) {
            version = versionParts[0..versionParts.size()-2].join('.') + '.' + (versionParts[versionParts.size()-1].toInteger()+1).toString() + "-SNAPSHOT"
        } else {
            // we are unable to part the last token as an integer, so we just append SNAPSHOT to this version
            version = versionParts[0..versionParts.size()-1].join('.') + '-SNAPSHOT'
        }
    }
}
